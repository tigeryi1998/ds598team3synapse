{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "ds598team3synapse"
		},
		"ds598team3synapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ds598team3synapse-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:ds598team3synapse.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ds598team3synapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ds598team3.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/ds598team3synapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ds598team3synapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds598team3synapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ds598team3synapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AggBikeStations')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create AggBikeStations table with matching data types (internal sql table)\n\nCREATE TABLE AggBikeStations (\n    station_name NVARCHAR(100), \n    station_id NVARCHAR(100),\n    count INT,\n    Latitude FLOAT,\n    Longitude FLOAT,\n    status NVARCHAR(100),\n    District NVARCHAR(100),\n    docks INT\n);\nGO\n\n-- Insert data into AggBlueBike\nINSERT INTO AggBikeStations (\n    station_name,\n    station_id,\n    count,\n    Latitude,\n    Longitude,\n    status,\n    District,\n    docks\n)\nSELECT\n    station_name,\n    station_id,\n    count,\n    Latitude,\n    Longitude,\n    status,\n    District,\n    docks\nFROM \n    ExternalAggBikeStations;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AggBluebike')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create AggBlueBike table with matching data types (internal sql table)\nCREATE TABLE AggBlueBike (\n    date DATE, \n    riders INT,\n    trips INT,\n    stations INT,\n    bikes_lost INT,\n    bikes_not_returned INT,\n    not_start_at_dock INT,\n    avg_distance FLOAT,\n    avg_duration FLOAT,\n    avg_duration_min FLOAT,\n    avg_duration_h FLOAT,\n    avg_speed_ms FLOAT,\n    avg_speed_kmh FLOAT,\n    max_distance FLOAT,\n    max_duration FLOAT,\n    max_duration_min FLOAT,\n    max_duration_h FLOAT,\n    max_speed_ms FLOAT,\n    max_speed_kmh FLOAT\n);\nGO\n\n-- Insert data into AggBlueBike\nINSERT INTO AggBlueBike (\n    date, \n    riders,\n    trips,\n    stations,\n    bikes_lost,\n    bikes_not_returned,\n    not_start_at_dock,\n    avg_distance,\n    avg_duration,\n    avg_duration_min,\n    avg_duration_h,\n    avg_speed_ms,\n    avg_speed_kmh,\n    max_distance,\n    max_duration,\n    max_duration_min,\n    max_duration_h,\n    max_speed_ms,\n    max_speed_kmh\n)\nSELECT\n    date, \n    riders,\n    trips,\n    stations,\n    bikes_lost,\n    bikes_not_returned,\n    not_start_at_dock,\n    avg_distance,\n    avg_duration,\n    avg_duration_min,\n    avg_duration_h,\n    avg_speed_ms,\n    avg_speed_kmh,\n    max_distance,\n    max_duration,\n    max_duration_min,\n    max_duration_h,\n    max_speed_ms,\n    max_speed_kmh\nFROM \n    ExternalAggBluebike;\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BikeStation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create BikeStation table with matching data types (internal sql table)\n\nCREATE TABLE BikeStation (\n    Number NVARCHAR(100), \n    Name NVARCHAR(200),\n    Latitude FLOAT,\n    Longitude FLOAT,\n    status NVARCHAR(100),\n    District NVARCHAR(100),\n    docks INT\n);\nGO\n\n-- Insert data into AggBlueBike\nINSERT INTO BikeStation (\n    Number, \n    Name,\n    Latitude,\n    Longitude,\n    status,\n    District,\n    docks\n)\nSELECT\n    Number, \n    Name,\n    Latitude,\n    Longitude,\n    status,\n    District,\n    docks\nFROM \n    ExternalBikeStation;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BlueBike')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create BlueBike table with matching data types (internal sql table)\nCREATE TABLE BlueBike (\n    ride_id NVARCHAR(100),\n    rideable_type NVARCHAR(100),\n    started_at DATETIME,\n    ended_at DATETIME,\n    start_station_name NVARCHAR(100),\n    start_station_id NVARCHAR(100),\n    end_station_name NVARCHAR(100),\n    end_station_id NVARCHAR(100),\n    start_lat FLOAT,\n    start_lng FLOAT,\n    end_lat FLOAT,\n    end_lng FLOAT,\n    member_casual NVARCHAR(100),\n    is_bike_lost INT,\n    is_return_to_dock INT,\n    is_start_from_dock INT,\n    distance FLOAT,\n    duration FLOAT,\n    speed_ms FLOAT,\n    speed_kmh FLOAT,\n    start_date DATE,\n    end_date DATE,\n    is_not_return_to_dock INT,\n    is_not_start_from_dock INT,\n    duration_min FLOAT,\n    duration_h FLOAT\n);\nGO\n\n-- Insert data into BlueBike\nINSERT INTO BlueBike (\n    ride_id,\n    rideable_type,\n    started_at,\n    ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng,\n    member_casual,\n    is_bike_lost,\n    is_return_to_dock,\n    is_start_from_dock,\n    distance,\n    duration,\n    speed_ms,\n    speed_kmh,\n    start_date,\n    end_date,\n    is_not_return_to_dock,\n    is_not_start_from_dock,\n    duration_min,\n    duration_h\n)\nSELECT\n    ride_id,\n    rideable_type,\n    started_at,\n    ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng,\n    member_casual,\n    is_bike_lost,\n    is_return_to_dock,\n    is_start_from_dock,\n    distance,\n    duration,\n    speed_ms,\n    speed_kmh,\n    start_date,\n    end_date,\n    is_not_return_to_dock,\n    is_not_start_from_dock,\n    duration_min,\n    duration_h\nFROM \n    ExternalBluebike;\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataSource')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create external data source\nCREATE EXTERNAL DATA SOURCE MyDataSource\nWITH (\n    LOCATION = 'https://ds598team3.dfs.core.windows.net/data'\n);\nGO\n\n-- Create external file format\nCREATE EXTERNAL FILE FORMAT ParquetFileFormat\nWITH (\nFORMAT_TYPE = PARQUET\n);\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimDate')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create and load DimDate table\n-- A dimension table focused on date attributes.\n-- Provides date details like year, month, day, quarter,\n-- and week, along with names for days and months, and a weekend indicator.\n\nCREATE TABLE DimDate (\n    date DATE,\n    year INT,\n    month INT,\n    day INT,\n    quarter INT,\n    week INT,\n    day_of_week INT,\n    day_name VARCHAR(10),\n    month_name VARCHAR(10),\n    is_weekend BIT\n);\nGO\n\n-- Populate DimDate Table from ExternalBluebike\nINSERT INTO DimDate (\n    date, year, month, day,\n    quarter, week, day_of_week, \n    day_name, month_name, is_weekend\n)\nSELECT DISTINCT\n    CAST(started_at AS DATE) AS date,\n    DATEPART(YEAR, started_at) AS year,\n    DATEPART(MONTH, started_at) AS month,\n    DATEPART(DAY, started_at) AS day,\n    DATEPART(QUARTER, started_at) AS quarter,\n    DATEPART(WEEK, started_at) AS week,\n    DATEPART(WEEKDAY, started_at) AS day_of_week,\n    DATENAME(WEEKDAY, started_at) AS day_name,\n    DATENAME(MONTH, started_at) AS month_name,\n    CASE WHEN DATEPART(WEEKDAY, started_at) IN (1, 7) THEN 1 ELSE 0 END AS is_weekend\nFROM\n    ExternalBluebike;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimDateTime')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create and load DimDateTime table\n-- A dimension table that breaks down date and time components.\n-- Contains detailed temporal information such as year, month, day, hour, minute, \n--and whether the date is a weekend.\n\nCREATE TABLE DimDateTime (\n    date_time DATETIME,\n    date DATE,\n    year INT,\n    month INT,\n    day INT,\n    hour INT,\n    minute INT,\n    second INT,\n    quarter INT,\n    week INT,\n    day_of_week INT,\n    day_name VARCHAR(10),\n    month_name VARCHAR(10),\n    is_weekend BIT\n);\nGO\n\nINSERT INTO DimDateTime (date_time, date, year, month, day, \nhour, minute, second, quarter, week, \nday_of_week, day_name, month_name, is_weekend)\nSELECT DISTINCT\n    CAST(started_at AS DATETIME) AS date_time,\n    CAST(started_at AS DATE) AS date,\n    DATEPART(YEAR, started_at) AS year,\n    DATEPART(MONTH, started_at) AS month,\n    DATEPART(DAY, started_at) AS day,\n    DATEPART(HOUR, started_at) AS hour,\n    DATEPART(MINUTE, started_at) AS minute,\n    DATEPART(SECOND, started_at) AS second,\n    DATEPART(QUARTER, started_at) AS quarter,\n    DATEPART(WEEK, started_at) AS week,\n    DATEPART(WEEKDAY, started_at) AS day_of_week,\n    DATENAME(WEEKDAY, started_at) AS day_name,\n    DATENAME(MONTH, started_at) AS month_name,\n    CASE WHEN DATEPART(WEEKDAY, started_at) IN (1, 7) THEN 1 ELSE 0 END AS is_weekend\nFROM\n    ExternalBluebike;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Drop')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Drop external tables\n-- DROP EXTERNAL TABLE ExternalBluebike;\n-- DROP EXTERNAL TABLE ExternalAggBluebike;\n-- DROP EXTERNAL TABLE ExternalBikeStation;\n-- DROP EXTERNAL TABLE ExternalAggBikeStations;\nDROP EXTERNAL TABLE ExternalWeather;\n-- GO\n\n-- Drop regular tables\n-- DROP TABLE BlueBike;\n-- DROP TABLE AggBlueBike;\n-- DROP TABLE DimDate;\n-- DROP TABLE DimDateTime;\n-- DROP TABLE BikeStation;\n-- DROP TABLE AggBikeStations;\nDROP TABLE FactWeather;\n-- GO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ExternalAggBikeStations')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create external table ExternalAggBikeStations\n\nCREATE EXTERNAL TABLE ExternalAggBikeStations(\n    station_name NVARCHAR(100), \n    station_id NVARCHAR(100),\n    count INT,\n    Latitude FLOAT,\n    Longitude FLOAT,\n    status NVARCHAR(100),\n    District NVARCHAR(100),\n    docks INT\n)\nWITH (\n    LOCATION = 'gold/agg_stations/parquet/agg_stations.parquet',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ExternalAggBluebike')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create external table ExternalAggBluebike\nCREATE EXTERNAL TABLE ExternalAggBluebike(\n    date DATE, \n    riders INT,\n    trips INT,\n    stations INT,\n    bikes_lost INT,\n    bikes_not_returned INT,\n    not_start_at_dock INT,\n    avg_distance FLOAT,\n    avg_duration FLOAT,\n    avg_duration_min FLOAT,\n    avg_duration_h FLOAT,\n    avg_speed_ms FLOAT,\n    avg_speed_kmh FLOAT,\n    max_distance FLOAT,\n    max_duration FLOAT,\n    max_duration_min FLOAT,\n    max_duration_h FLOAT,\n    max_speed_ms FLOAT,\n    max_speed_kmh FLOAT\n)\nWITH (\n    LOCATION = 'gold/agg_bluebike/parquet/bluebike_agg.parquet',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ExternalBikeStation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create external table ExternalBikeStation\n\nCREATE EXTERNAL TABLE ExternalBikeStation(\n    Number NVARCHAR(100), \n    Name NVARCHAR(200),\n    Latitude FLOAT,\n    Longitude FLOAT,\n    status NVARCHAR(100),\n    District NVARCHAR(100),\n    docks INT\n)\nWITH (\n    LOCATION = 'gold/bike_station/parquet/bike_station.parquet',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ExternalBluebike')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create external table ExternalBluebike\nCREATE EXTERNAL TABLE ExternalBluebike(\n    ride_id NVARCHAR(100),\n    rideable_type NVARCHAR(100),\n    started_at DATETIME,\n    ended_at DATETIME,\n    start_station_name NVARCHAR(100),\n    start_station_id NVARCHAR(100),\n    end_station_name NVARCHAR(100),\n    end_station_id NVARCHAR(100),\n    start_lat FLOAT,\n    start_lng FLOAT,\n    end_lat FLOAT,\n    end_lng FLOAT,\n    member_casual NVARCHAR(100),\n    is_bike_lost INT,\n    is_return_to_dock INT,\n    is_start_from_dock INT,\n    distance FLOAT,\n    duration FLOAT,\n    speed_ms FLOAT,\n    speed_kmh FLOAT,\n    start_date DATE,\n    end_date DATE,\n    is_not_return_to_dock INT,\n    is_not_start_from_dock INT,\n    duration_min FLOAT,\n    duration_h FLOAT\n)\nWITH (\n    LOCATION = 'gold/bluebike/parquet/bluebike.parquet',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Validate')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP 10 * FROM BlueBike;\nSELECT TOP 10 * FROM AggBlueBike;\nSELECT TOP 10 * FROM DimDate;\nSELECT TOP 10 * FROM DimDateTime;\nSELECT TOP 10 * FROM AggBikeStations;\nSELECT TOP 10 * FROM BikeStation;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds598team3sqlpool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ExternalWeather')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create ExternalWeather table with matching data types from databricks\nCREATE EXTERNAL TABLE ExternalWeather(\n    clouds_all SMALLINT,\n    feels_like_K FLOAT,\n    humidity SMALLINT,\n    pressure SMALLINT,\n    temp_K FLOAT,\n    temp_max_K FLOAT,\n    temp_min_K FLOAT,\n    wind_deg SMALLINT,\n    wind_gust FLOAT,\n    wind_speed FLOAT,\n    rain_1h REAL,\n    corrected_timestamp INT,\n    location NVARCHAR(100),\n    date_time DATETIME,\n    id NVARCHAR(100),\n    temp_C FLOAT,\n    temp_min_C FLOAT,\n    temp_max_C FLOAT,\n    feels_like_C FLOAT,\n    temp_F FLOAT,\n    temp_min_F FLOAT,\n    temp_max_F FLOAT,\n    feels_like_F FLOAT,\n    lat FLOAT,\n    lon FLOAT,\n    weather_id_value integer,\n    weather_mail_value NVARCHAR(100),\n    weather_description_value NVARCHAR(100),\n    weather_icon_value NVARCHAR(100)\n)\nWITH (\n    LOCATION = 'gold/processed_weather/processed_weather.parquet',\n    DATA_SOURCE = MyDataSource,\n    FILE_FORMAT = ParquetFileFormat\n);\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FactWeather')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create FactWeather table with matching data types\n\nCREATE TABLE FactWeather(\n    clouds_all SMALLINT,\n    feels_like_K FLOAT,\n    humidity SMALLINT,\n    pressure SMALLINT,\n    temp_K FLOAT,\n    temp_max_K FLOAT,\n    temp_min_K FLOAT,\n    wind_deg SMALLINT,\n    wind_gust FLOAT,\n    wind_speed FLOAT,\n    rain_1h REAL,\n    corrected_timestamp INT,\n    location NVARCHAR(100),\n    date_time DATETIME,\n    id NVARCHAR(100),\n    temp_C FLOAT,\n    temp_min_C FLOAT,\n    temp_max_C FLOAT,\n    feels_like_C FLOAT,\n    temp_F FLOAT,\n    temp_min_F FLOAT,\n    temp_max_F FLOAT,\n    feels_like_F FLOAT,\n    lat FLOAT,\n    lon FLOAT,\n    weather_id_value integer,\n    weather_mail_value NVARCHAR(100),\n    weather_description_value NVARCHAR(100),\n    weather_icon_value NVARCHAR(100),\n    weather_combined_value NVARCHAR(200)\n)\n-- Insert data into FactWeather\nINSERT INTO FactWeather\nSELECT\n    clouds_all,\n    feels_like_K,\n    humidity,\n    pressure,\n    temp_K,\n    temp_max_K,\n    temp_min_K,\n    wind_deg,\n    wind_gust,\n    wind_speed,\n    rain_1h,\n    corrected_timestamp,\n    location,\n    date_time,\n    CAST(date_time AS DATE) AS date,\n    id,\n    temp_C,\n    temp_min_C,\n    temp_max_C,\n    feels_like_C,\n    temp_F,\n    temp_min_F,\n    temp_max_F,\n    feels_like_F,\n    lat,\n    lon,\n    CONCAT(weather_id_value, '_', weather_icon_value) AS weather_combined_value\nFROM ExternalWeather;\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ds598team3sqlpool",
						"poolName": "ds598team3sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}